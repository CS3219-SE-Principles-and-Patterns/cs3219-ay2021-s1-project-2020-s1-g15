export type Util = {
  _id: string;
  createdAt: Date;
  updatedAt: Date;
};
export type Question = Util & {
  title: string; // title of the question, created by user
  slug: string; // URL slug, generated by title and _id
  markdown: string; // markdown content, created by user
  userId: string; // id of the user who created this question
  answerIds: string[]; // list of answers to this question, updated when adding answers
  level: string;
  subject: string;
  upvotes: number; // number of upvotes, updated when adding upvotes
  downvotes: number; // number of downvotes, updated when adding downvotes
};

export type QuestionTableData = Util &
  Question & {
    key: number;
  };

export type Answer = Util & {
  markdown: string;
  userId: string; // id of the user who created this question
  upvotes: number;
  downvotes: number;
};

export enum Level {
  PRIMARY = "primary",
  SECONDARY = "secondary",
  JUNIOR_COLLEGE = "junior college",
  DEFAULT = "others",
}

export enum Subject {
  ENGLISH = "english",
  MATHEMATICS = "mathematics",
  SCIENCE = "science",
  PHYSICS = "physics",
  CHEMISTRY = "chemistry",
  BIOLOGY = "biology",
  GENERAL = "general",
  DEFAULT = "others",
}

export type User = Util & {
  email: string;
  answerIds: string[];
  questionIds: string[];
  answers: Answer[];
  questions: Question[];
};

// -----------------------------------------------------------------------------
// API Types
// -----------------------------------------------------------------------------

export type GetAllQuestionsParam = {
  page: number;
  pageSize: number;
};

export type GetAllQuestionResponse = {
  questions: Question[];
  total: number;
};

export type QuestionParam = {
  title: string;
  markdown: string;
  level: string;
  subject: string;
};

export type ApiError = {
  status: string;
  message: string;
};

export type RegisterUserParam = {
  email: string;
  password: string;
};
export type UserApi = Util & {
  email: string;
  username: string;
  answerIds: string[];
  questionIds: string[];
};
